import pandas as pd
import os
import logging
from datetime import datetime, timedelta
from openpyxl.styles import Alignment
from filelock import FileLock
import config
from excel_manager import ExcelManager
from reports import generate_stock_report  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
from utils import format_currency
from decorators import log_exceptions
import asyncio

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}

def resetUserState(chat_id):
    user_state[chat_id] = {
        "operation": None,
        "step": None,
        "product_name": None,
        "quantity": None,
        "comment": None,
        "employee": None
    }
    logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å–±—Ä–æ—à–µ–Ω–æ.")

def logUserStateChange(chat_id, new_state):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–µ—Ä–µ—à—ë–ª –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é: {new_state}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ExcelManager
excel_manager = ExcelManager(config.settings.EXCEL_FILE)

@log_exceptions
def getTotalStockValue():
    inventory_df = excel_manager.read_sheet_as_df(config.settings.SHEET_REST, skiprows=3, index_col=1)
    price_df = excel_manager.read_sheet_as_df(config.settings.SHEET_PRICE, index_col=0)
    if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' not in inventory_df.columns or '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' not in price_df.columns:
        logging.error("–°—Ç–æ–ª–±–µ—Ü '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return None
    inventory_df = pd.merge(inventory_df, price_df, how='left', on='–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    inventory_df['total'] = inventory_df['–°—Ç–æ–∏–º–æ—Å—Ç—å'] * inventory_df['–û—Å—Ç–∞—Ç–æ–∫']
    total_inventory = round(inventory_df['total'].sum(), 2)
    formatted_total = f"{total_inventory:,.2f}".replace(",", " ")
    result = (
        "üí∞ <b>–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ</b>\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üî¢ <b>–°—É–º–º–∞:</b> <code>{formatted_total} —Ä—É–±.</code>"
    )
    return result

@log_exceptions
def getProductStock(article):
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
    inventory_df = excel_manager.read_sheet_as_df(config.settings.SHEET_REST, skiprows=3)
    price_df = excel_manager.read_sheet_as_df(config.settings.SHEET_PRICE)
    
    # –ó–∞–¥–∞—ë–º —è–≤–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É '–ê—Ä—Ç–∏–∫—É–ª' –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –ø–æ–¥ –∏–º–µ–Ω–µ–º "–ê—Ä—Ç–∏–∫—É–ª_price"
    inventory_df = pd.merge(
        inventory_df, 
        price_df, 
        how='left', 
        on='–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 
        suffixes=('_rest', '_price')
    )
    
    inventory_df['total'] = inventory_df['–°—Ç–æ–∏–º–æ—Å—Ç—å'] * inventory_df['–û—Å—Ç–∞—Ç–æ–∫']
    article = str(article).strip().lstrip("0")
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É –≤–∏–¥—É
    inventory_df['–ê—Ä—Ç–∏–∫—É–ª_price'] = inventory_df['–ê—Ä—Ç–∏–∫—É–ª_price'].astype(str).str.strip().str.lstrip("0")
    
    product_df = inventory_df.loc[inventory_df['–ê—Ä—Ç–∏–∫—É–ª_price'] == article]
    if product_df.empty:
        return "–ù–µ—Ç —Ç–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º"
    if product_df['–û—Å—Ç–∞—Ç–æ–∫'].empty:
        return "–û—Å—Ç–∞—Ç–∫–æ–≤ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ"
    prod_name = product_df.iloc[0]['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']
    prod_quantity = int(product_df.iloc[0]['–û—Å—Ç–∞—Ç–æ–∫'])
    prod_total = round(product_df.iloc[0]['total'], 2)
    return (prod_name, prod_quantity, prod_total)

@log_exceptions
def validateProductArticle(article):
    goods_df = excel_manager.read_sheet_as_df(config.settings.SHEET_PRICE)
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö —Å—Ç–æ–ª–±—Ü–æ–≤, –Ω–µ –ø—Ä–∏–≤–æ–¥—è –∏—Ö –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É 
    goods_df.columns = goods_df.columns.str.strip()
    if '–ê—Ä—Ç–∏–∫—É–ª' not in goods_df.columns or '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' not in goods_df.columns:
        logging.error("–ù–µ—Ç –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ñ–∞–π–ª–µ.")
        return "–û—à–∏–±–∫–∞: –ù–µ—Ç –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ñ–∞–π–ª–µ."
    goods_df['–ê—Ä—Ç–∏–∫—É–ª'] = goods_df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip()
    article_str = str(article).strip().lstrip("0")
    logging.info(f"–ò—â–µ–º –∞—Ä—Ç–∏–∫—É–ª: '{article_str}'")
    matching_goods = goods_df.loc[goods_df['–ê—Ä—Ç–∏–∫—É–ª'] == article_str]
    if matching_goods.empty:
        logging.info(f"–ê—Ä—Ç–∏–∫—É–ª '{article_str}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return 0
    product_row = matching_goods.iloc[0]
    logging.info(f"–ù–∞–π–¥–µ–Ω –∞—Ä—Ç–∏–∫—É–ª: {product_row['–ê—Ä—Ç–∏–∫—É–ª']}, —Ç–æ–≤–∞—Ä: {product_row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']}")
    return (product_row['–ê—Ä—Ç–∏–∫—É–ª'], product_row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'])

def listProductArticles():
    try:
        price_data = excel_manager.read_sheet_as_df(config.settings.SHEET_PRICE)
        price_data.columns = price_data.columns.str.strip()
        price_data = price_data[['–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']].dropna()
        articles = []
        for _, row in price_data.iterrows():
            art_code = str(row['–ê—Ä—Ç–∏–∫—É–ª']).strip()
            articles.append(f"{art_code}: {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']}")
        return "\n".join(articles)
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ listProductArticles: {err}")
        return f"–û—à–∏–±–∫–∞: {err}"

def listControllerStocks():
    try:
        inventory_df = excel_manager.read_sheet_as_df(config.settings.SHEET_REST, skiprows=3)
        controllers_df = inventory_df[inventory_df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'].str.contains("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä|–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä", na=False, regex=True)]
        controllers_df = controllers_df[['–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–û—Å—Ç–∞—Ç–æ–∫']]
        grouped_controllers = controllers_df.groupby(['–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'], as_index=False).sum()
        if grouped_controllers.empty or grouped_controllers['–û—Å—Ç–∞—Ç–æ–∫'].sum() == 0:
            return "‚ùå <i>–ù–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ</i>"
        formatted_list = "\n".join([
            f"üîπ <b>{row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']}</b> (–ê—Ä—Ç–∏–∫—É–ª: {row['–ê—Ä—Ç–∏–∫—É–ª']}) ‚Äî <code>{int(row['–û—Å—Ç–∞—Ç–æ–∫'])} —à—Ç.</code>"
            for _, row in grouped_controllers.iterrows()
        ])
        return f"üì¶ <b>–û—Å—Ç–∞—Ç–æ–∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ:</b>\n\n{formatted_list}"
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ listControllerStocks: {err}")
        return f"üö® <i>–û—à–∏–±–∫–∞:</i> {err}"

def findFirstEmptyRow(worksheet, start_row=2):
    for row_idx in range(start_row, worksheet.max_row + 1):
        row_cells = worksheet[row_idx]
        if all(cell.value is None or str(cell.value).strip() == "" for cell in row_cells):
            return row_idx
    return worksheet.max_row + 1

@log_exceptions
async def recordWarehouseOperation(name, operation_type, amount, user_comment="", employee=""):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é (–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≥—Ä—É–∑–∫—É) –≤ –ª–∏—Å—Ç "–î–≤–∏–∂–µ–Ω–∏–µ_—Å–∫–ª–∞–¥" 
    –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç–µ "–°–∫–ª–∞–¥_–æ—Å—Ç–∞—Ç–∫–∏".
    """
    current_date = datetime.today()
    operation_data = {
        '–î–∞—Ç–∞': [current_date],
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': [name],
        '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ': [int(amount) if operation_type == "delivery" else 0],
        '–û—Ç–≥—Ä—É–∑–∫–∞': [int(amount) if operation_type == "shipment" else 0],
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': [user_comment],
        '–°–æ—Ç—Ä—É–¥–Ω–∏–∫': [employee]
    }
    operation_df = pd.DataFrame(operation_data)
    try:
        wb = await excel_manager.load_workbook_async()
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {err}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {err}"
    
    move_sheet = config.settings.SHEET_MOVE
    if move_sheet not in wb.sheetnames:
        logging.error(f"–õ–∏—Å—Ç '{move_sheet}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return f"‚ùå –û—à–∏–±–∫–∞: –õ–∏—Å—Ç '{move_sheet}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ."
    ws_move = wb[move_sheet]
    empty_row = findFirstEmptyRow(ws_move, start_row=2)
    for col_idx, col_name in enumerate(operation_df.columns, start=1):
        if col_name == "–î–∞—Ç–∞":
            cell = ws_move.cell(row=empty_row, column=col_idx, value=operation_df.iloc[0][col_name])
            cell.number_format = "DD.MM.YY"
            cell.alignment = Alignment(horizontal='right')
        else:
            ws_move.cell(row=empty_row, column=col_idx, value=operation_df.iloc[0][col_name])
    
    rest_sheet = config.settings.SHEET_REST
    if rest_sheet not in wb.sheetnames:
        logging.error(f"–õ–∏—Å—Ç '{rest_sheet}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return f"‚ùå –û—à–∏–±–∫–∞: –õ–∏—Å—Ç '{rest_sheet}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ."
    ws_rest = wb[rest_sheet]
    header_row = 4
    header_map = {}
    for cell in ws_rest[header_row]:
        if cell.value and isinstance(cell.value, str):
            header_map[cell.value.strip()] = cell.column
    for req_col in ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "–û—Ç–≥—Ä—É–∑–∫–∞", "–û—Å—Ç–∞—Ç–æ–∫"]:
        if req_col not in header_map:
            logging.error(f"–°—Ç–æ–ª–±–µ—Ü '{req_col}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü '{req_col}' –≤ –ª–∏—Å—Ç–µ '–°–∫–ª–∞–¥_–æ—Å—Ç–∞—Ç–∫–∏'."
    col_product = header_map["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"]
    col_delivery = header_map["–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ"]
    col_shipment = header_map["–û—Ç–≥—Ä—É–∑–∫–∞"]
    col_balance = header_map["–û—Å—Ç–∞—Ç–æ–∫"]
    product_exists = False
    for row_idx in range(header_row + 1, ws_rest.max_row + 1):
        cell_val = ws_rest.cell(row=row_idx, column=col_product).value
        if cell_val and str(cell_val).strip().lower() == str(name).strip().lower():
            product_exists = True
            curr_delivery = ws_rest.cell(row=row_idx, column=col_delivery).value or 0
            curr_shipment = ws_rest.cell(row=row_idx, column=col_shipment).value or 0
            curr_balance = ws_rest.cell(row=row_idx, column=col_balance).value or 0
            try:
                curr_delivery = int(curr_delivery)
            except:
                curr_delivery = 0
            try:
                curr_shipment = int(curr_shipment)
            except:
                curr_shipment = 0
            try:
                curr_balance = int(curr_balance)
            except:
                curr_balance = 0
            if operation_type == "delivery":
                new_delivery = curr_delivery + int(amount)
                new_balance = curr_balance + int(amount)
                ws_rest.cell(row=row_idx, column=col_delivery, value=new_delivery)
            elif operation_type == "shipment":
                new_shipment = curr_shipment + int(amount)
                new_balance = curr_balance - int(amount)
                ws_rest.cell(row=row_idx, column=col_shipment, value=new_shipment)
            else:
                return "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏."
            ws_rest.cell(row=row_idx, column=col_balance, value=new_balance)
            break
    if not product_exists:
        logging.error(f"–¢–æ–≤–∞—Ä '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return f"‚ùå –û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏—Å—Ç–µ '–°–∫–ª–∞–¥_–æ—Å—Ç–∞—Ç–∫–∏'."
    try:
        await excel_manager.save_workbook_async()
        logging.info(f"–û–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è '{name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞.")
        return "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∫–ª–∞–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"
    except PermissionError:
        return "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤ Excel. –ó–∞–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {err}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {err}"

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ—Ç—á—ë—Ç–æ–≤

def listDeliveriesLastNDays(n):
    return generate_stock_report(n, "delivery")

def listShipmentsLastNDays(n):
    return generate_stock_report(n, "shipment")
