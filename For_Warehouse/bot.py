import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import StateFilter, Command
from utils import TextEquals
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.client.bot import DefaultBotProperties
import config
import handlers as test

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename=config.settings.LOG_FILE,
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    encoding='utf-8'
)

bot = Bot(token=config.settings.TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

class OperationState(StatesGroup):
    menu = State()  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π
    waiting_for_article = State()      # –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
    waiting_for_quantity = State()     # –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    waiting_for_comment = State()      # –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    waiting_for_employee = State()     # –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    kb = ReplyKeyboardBuilder()
    kb.button(text="–û—Å—Ç–∞—Ç–∫–∏")
    kb.button(text="–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è")
    kb.button(text="–û—Ç–≥—Ä—É–∑–∫–∏")
    kb.adjust(3)
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}! –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?", reply_markup=kb.as_markup())
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")

@dp.message(TextEquals(equals="–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
async def return_to_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await cmd_start(message, state)

@dp.message(TextEquals(equals="–æ—Ç–º–µ–Ω–∞"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await cmd_start(message, state)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é.")

@dp.message(OperationState.waiting_for_article)
async def process_article(message: types.Message, state: FSMContext):
    article_input = message.text.strip()
    try:
        prod_info = test.validateProductArticle(article_input)
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_article –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Ä—Ç–∏–∫—É–ª–∞ '{article_input}': {err}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Ä—Ç–∏–∫—É–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    if prod_info == 0:
        await message.answer("–ê—Ä—Ç–∏–∫—É–ª –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        return
    else:
        await state.update_data(product_name=prod_info[1])
        await state.update_data(step="enter_quantity")
        await message.answer(f"–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: *{prod_info[1]}*\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", parse_mode="Markdown")
        await state.set_state(OperationState.waiting_for_quantity)

@dp.message(OperationState.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text.strip())
        await state.update_data(quantity=quantity)
        await state.update_data(step="enter_comment")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")
        await state.set_state(OperationState.waiting_for_comment)
    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

@dp.message(OperationState.waiting_for_comment)
async def process_comment(message: types.Message, state: FSMContext):
    comment = message.text.strip()
    await state.update_data(comment=comment)
    await state.update_data(step="enter_employee")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
    await state.set_state(OperationState.waiting_for_employee)

@dp.message(OperationState.waiting_for_employee)
async def process_employee(message: types.Message, state: FSMContext):
    employee = message.text.strip()
    data = await state.get_data()
    await state.update_data(employee=employee)
    operation = data.get("operation", "")
    product_name = data.get("product_name", "")
    quantity = data.get("quantity", 0)
    comment = data.get("comment", "")
    try:
        # –í—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        result = await test.recordWarehouseOperation(product_name, operation, quantity, comment, employee)
        await message.answer(f"–î–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã:\n{result}")
        logging.info(f"–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id} –ø–æ —Ç–æ–≤–∞—Ä—É {product_name}")
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_employee: {err}")
        await message.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.")
    await state.clear()
    await cmd_start(message, state)

@dp.message()
async def main_handler(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    text = message.text.strip()
    data = await state.get_data()

    if text == "–û—Å—Ç–∞—Ç–∫–∏":
        await state.update_data(operation="rest")
        kb = ReplyKeyboardBuilder()
        kb.button(text="–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ —Ä—É–±–ª—è—Ö")
        kb.button(text="–û—Å—Ç–∞—Ç–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
        kb.button(text="–û—Å—Ç–∞—Ç–æ–∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤")
        kb.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        kb.adjust(1)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=kb.as_markup())

    elif text == "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è":
        await state.set_state(OperationState.menu)
        await state.update_data(operation="delivery")
        kb = ReplyKeyboardBuilder()
        kb.button(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π")
        kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
        kb.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        kb.adjust(1)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π:", reply_markup=kb.as_markup())

    elif text == "–û—Ç–≥—Ä—É–∑–∫–∏":
        await state.set_state(OperationState.menu)
        await state.update_data(operation="shipment")
        kb = ReplyKeyboardBuilder()
        kb.button(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≥—Ä—É–∑–æ–∫")
        kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É")
        kb.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        kb.adjust(1)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–≥—Ä—É–∑–æ–∫:", reply_markup=kb.as_markup())

    elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await cmd_start(message, state)

    elif text == "–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ —Ä—É–±–ª—è—Ö":
        result = test.getTotalStockValue()
        await message.answer(f"–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n{result}")

    # –ü—Ä–∏ –≤—ã–±–æ—Ä–µ "–û—Å—Ç–∞—Ç–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞" –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    elif text == "–û—Å—Ç–∞—Ç–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞":
        await state.update_data(operation="rest_specific")
        articles_list = test.listProductArticles()
        await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã:\n{articles_list}")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–∞:")
    
    elif text == "–û—Å—Ç–∞—Ç–æ–∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤":
        result = test.listControllerStocks()
        await message.answer(result)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    elif data.get("operation") == "rest_specific":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
        if text == "–í–≤–µ—Å—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–∞:")
        else:
            article_input = text.strip()
            result = test.getProductStock(article_input)
            if isinstance(result, tuple) and len(result) == 3:
                prod_name, prod_quantity, prod_total = result
                quantity_str = f"üî¥ {prod_quantity:,d}" if prod_quantity < 0 else f"{prod_quantity:,d}"
                total_str = f"üî¥ {prod_total:,.2f}" if prod_total < 0 else f"{prod_total:,.2f}"
                response = (
                    f"üì¶ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
                    f"üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {prod_name}\n"
                    f"üîπ <b>–û—Å—Ç–∞—Ç–æ–∫:</b> <code>{quantity_str} —à—Ç.</code>\n"
                    f"üí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{total_str} —Ä—É–±.</code>"
                )
                await message.answer(response)
            else:
                await message.answer("‚ùå <i>–û—à–∏–±–∫–∞:</i> –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

            # –ü–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            kb = ReplyKeyboardBuilder()
            kb.button(text="–í–≤–µ—Å—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–Ω–æ–≤–æ")
            kb.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            kb.adjust(1)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup())

    elif text in ["–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π"] and data.get("operation") == "delivery":
        kb = ReplyKeyboardBuilder()
        kb.button(text="–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞ 7 –¥–Ω–µ–π")
        kb.button(text="–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞ 30 –¥–Ω–µ–π")
        kb.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        kb.adjust(1)
        await message.answer("–ó–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è?", reply_markup=kb.as_markup())

    elif text in ["–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≥—Ä—É–∑–æ–∫"] and data.get("operation") == "shipment":
        kb = ReplyKeyboardBuilder()
        kb.button(text="–û—Ç–≥—Ä—É–∑–∫–∏ –∑–∞ 7 –¥–Ω–µ–π")
        kb.button(text="–û—Ç–≥—Ä—É–∑–∫–∏ –∑–∞ 30 –¥–Ω–µ–π")
        kb.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        kb.adjust(1)
        await message.answer("–ó–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç–≥—Ä—É–∑–∫–∏?", reply_markup=kb.as_markup())

    elif text in ["–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞ 7 –¥–Ω–µ–π", "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞ 30 –¥–Ω–µ–π"] and data.get("operation") == "delivery":
        n = 7 if "7 –¥–Ω–µ–π" in text else 30
        result = test.listDeliveriesLastNDays(n)
        await message.answer(f"–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞ {n} –¥–Ω–µ–π:\n{result}")
        kb = ReplyKeyboardBuilder()
        kb.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.as_markup())

    elif text in ["–û—Ç–≥—Ä—É–∑–∫–∏ –∑–∞ 7 –¥–Ω–µ–π", "–û—Ç–≥—Ä—É–∑–∫–∏ –∑–∞ 30 –¥–Ω–µ–π"] and data.get("operation") == "shipment":
        n = 7 if "7 –¥–Ω–µ–π" in text else 30
        result = test.listShipmentsLastNDays(n)
        await message.answer(f"–û—Ç–≥—Ä—É–∑–∫–∏ –∑–∞ {n} –¥–Ω–µ–π:\n{result}")
        kb = ReplyKeyboardBuilder()
        kb.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.as_markup())

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    elif text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ" and data.get("operation") == "delivery":
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        articles_list = test.listProductArticles()
        await state.update_data(step="enter_article")
        await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã:\n{articles_list}")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:")
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
        await state.set_state(OperationState.waiting_for_article)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–≥—Ä—É–∑–∫–∏
    elif text == "–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É" and data.get("operation") == "shipment":
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        articles_list = test.listProductArticles()
        await state.update_data(step="enter_article")
        await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã:\n{articles_list}")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏:")
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
        await state.set_state(OperationState.waiting_for_article)


    else:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")


if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
